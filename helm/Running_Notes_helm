https://codelabs.solace.dev/codelabs/helm-environment-setup/#1
https://www.microsoft.com/en-in/p/ubuntu-2004-lts/9n6svws3rx71?rtc=1&activetab=pivot:overviewtab

WSL - kartheekb / nayan

to have wsl in vs link to ubunty - view->command palette "Remote-WSL: New Window Using Distro..." command to open a remote window to Ubuntu WSL.

Helm client:
>   The helm client stores information in local directory referred to as  helm home.
> default is $HOME/.helm
> This directory contains configurations and cache data which is created by helm init.

-------------------------------------------------------------------------------------------------------------------------------------------------
    Tiller:  (from v2 its depricated)
    >   tiller is the cluster component of helm.
    >   it interacts directly with k8s API server to install, upgrade , query and remove k8s resources.
    >   it also stores objects that represents releases
    >   it typically installed by running the command helm init and lives in kube-system namespace (unless instructed otherwise)
-------------------------------------------------------------------------------------------------------------------------------------------------

3 main components of HELM are : chart, repository , release

Chart:
>   A chart is a helm package, which contains all resouce definitions necessary to run an application, tool or service inside a k8s cluster.
>   For list of k8s resources you can use link: https://github.com/helm/charts (it contains stable and incubator charts)


hub.helm.sh (now : https://artifacthub.io/)

Repository:
>   is a place where charts can be collected and shared.

Release:
>   A release is instance of chart running in k8s cluster, one chart can often be installed many times in the same cluster, each time it is installed a new release is created.

helm:
--------

Common actions for Helm:

- helm search:    search for charts
- helm pull:      download a chart to your local directory to view
- helm install:   upload the chart to Kubernetes
- helm list:      list releases of charts

Environment variables:

| Name                               | Description                                                                       |
|------------------------------------|-----------------------------------------------------------------------------------|
| $HELM_CACHE_HOME                   | set an alternative location for storing cached files.                             |
| $HELM_CONFIG_HOME                  | set an alternative location for storing Helm configuration.                       |
| $HELM_DATA_HOME                    | set an alternative location for storing Helm data.                                |
| $HELM_DEBUG                        | indicate whether or not Helm is running in Debug mode                             |
| $HELM_DRIVER                       | set the backend storage driver. Values are: configmap, secret, memory, postgres   |
| $HELM_DRIVER_SQL_CONNECTION_STRING | set the connection string the SQL storage driver should use.                      |
| $HELM_MAX_HISTORY                  | set the maximum number of helm release history.                                   |
| $HELM_NAMESPACE                    | set the namespace used for the helm operations.                                   |
| $HELM_NO_PLUGINS                   | disable plugins. Set HELM_NO_PLUGINS=1 to disable plugins.                        |
| $HELM_PLUGINS                      | set the path to the plugins directory                                             |
| $HELM_REGISTRY_CONFIG              | set the path to the registry config file.                                         |
| $HELM_REPOSITORY_CACHE             | set the path to the repository cache directory                                    |
| $HELM_REPOSITORY_CONFIG            | set the path to the repositories file.                                            |
| $KUBECONFIG                        | set an alternative Kubernetes configuration file (default "~/.kube/config")       |
| $HELM_KUBEAPISERVER                | set the Kubernetes API Server Endpoint for authentication                         |
| $HELM_KUBECAFILE                   | set the Kubernetes certificate authority file.                                    |
| $HELM_KUBEASGROUPS                 | set the Groups to use for impersonation using a comma-separated list.             |
| $HELM_KUBEASUSER                   | set the Username to impersonate for the operation.                                |
| $HELM_KUBECONTEXT                  | set the name of the kubeconfig context.                                           |
| $HELM_KUBETOKEN                    | set the Bearer KubeToken used for authentication.                                 |

Helm stores cache, configuration, and data based on the following configuration order:

- If a HELM_*_HOME environment variable is set, it will be used
- Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used
- When no other location is set a default location will be used based on the operating system

By default, the default directories depend on the Operating System. The defaults are listed below:

| Operating System | Cache Path                | Configuration Path             | Data Path               |
|------------------|---------------------------|--------------------------------|-------------------------|
| Linux            | $HOME/.cache/helm         | $HOME/.config/helm             | $HOME/.local/share/helm |
| macOS            | $HOME/Library/Caches/helm | $HOME/Library/Preferences/helm | $HOME/Library/helm      |
| Windows          | %TEMP%\helm               | %APPDATA%\helm                 | %APPDATA%\helm          |

Usage:
  helm [command]

Available Commands:
  completion  generate autocompletion scripts for the specified shell
  create      create a new chart with the given name
  dependency  manage a chart's dependencies
  env         helm client environment information
  get         download extended information of a named release
  help        Help about any command
  history     fetch release history
  install     install a chart
  lint        examine a chart for possible issues
  list        list releases
  package     package a chart directory into a chart archive
  plugin      install, list, or uninstall Helm plugins
  pull        download a chart from a repository and (optionally) unpack it in local directory
  repo        add, list, remove, update, and index chart repositories
  rollback    roll back a release to a previous revision
  search      search for a keyword in charts
  show        show information of a chart
  status      display the status of the named release
  template    locally render templates
  test        run tests for a release
  uninstall   uninstall a release
  upgrade     upgrade a release
  verify      verify that a chart at the given path has been signed and is valid
  version     print the client version information

Flags:
      --debug                       enable verbose output
  -h, --help                        help for helm
      --kube-apiserver string       the address and the port for the Kubernetes API server
      --kube-as-group stringArray   group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string         username to impersonate for the operation
      --kube-ca-file string         the certificate authority file for the Kubernetes API server connection
      --kube-context string         name of the kubeconfig context to use
      --kube-token string           bearer token used for authentication
      --kubeconfig string           path to the kubeconfig file
  -n, --namespace string            namespace scope for this request
      --registry-config string      path to the registry config file (default "/Users/kartheek/Library/Preferences/helm/registry.json")
      --repository-cache string     path to the file containing cached repository indexes (default "/Users/kartheek/Library/Caches/helm/repository")
      --repository-config string    path to the file containing repository names and URLs (default "/Users/kartheek/Library/Preferences/helm/repositories.yaml")

Use "helm [command] --help" for more information about a command.



Helm commands:
****************

helm
helm search hub
helm search hub mysql
helm repo add stable https://charts.helm.sh/stable
helm search repo stable

helm repo list
helm repo update
helm install stable/mysql --generate-name
kubectl get all
helm install myairflow stable/airflow
helm ls
helm uninstall myairflow

helm create mychart
create below cm yaml under /mychart/templates/configmap.yaml
        configmap.yaml
        ~~~~~~~~~~~~~
        apiVersion: v1
        kind: ConfigMap
        metadata:
        name: mychart-configmap
        data:
        myvalue: "Sample Config Map"
helm install helm-demo-configmap ./mychart
helm ls
kubectl get all
helm get manifest helm-demo-configmap
kubectl describe configmaps mychart-configmap
helm uninstall helm-demo-configmap

    built-in objects:
    ------------------
        https://helm.sh/docs/chart_template_guide/builtin_objects/
            apiVersion: v1
            kind: ConfigMap
            metadata:
            name: {{ .Release.Name }}-configmap
            data:
            myvalue: "Sample Config Map"
        helm install releasename-test ./mychart
        helm get manifest releasename-test
        helm install --debug --dry-run dryrun-test ./mychart
        kubectl describe configmaps releasename-test-configmap
        helm uninstall releasename-test

    read-values from a template:
    -----------------------------
        mychart/values.yaml
            costCode: CC98112
        costCode: {{ .Values.costCode }}
        helm install --debug --dry-run firstdryrun ./mychart
        helm install firstvalue ./mychart
        helm get manifest firstvalue
        kubectl describe configmaps firstvalue-configmap

    set-values to template:
    -----------------------
        helm install --dry-run --debug --set costCode=CC00000 valueseteg ./mychart
        helm install valueseteg ./mychart --set costCode=CC00000
        helm get manifest valueseteg
        kubectl describe configmaps valueseteg-configmap
        helm ls
        helm uninstall valueseteg

    template functions:
    ---------------------
        mychart/values.yaml
            projectCode: aazzxxyy
            infra:
                zone: a,b,c
                region: us-e
        Zone: {{ quote .Values.infra.zone }}
        Region: {{ quote .Values.infra.region }}
        ProjectCode: {{ upper .Values.projectCode }}
        helm install --dry-run --debug valueseteg ./mychart

        https://masterminds.github.io/sprig/
        https://godoc.org/text/template

    Pipeline and default values:
    -----------------------------
        pipeline: {{ .Values.projectCode | upper | quote }}
        now: {{ now | date "2006-01-02" | quote }}
        helm install --dry-run --debug valueseteg ./mychart

        default value:
        contact: {{ .Values.contact | default "1-800-123-0000" | quote }}
        helm install --dry-run --debug valueseteg ./mychart
        helm install --dry-run --debug --set contact=1-800-800-8888 valueseteg ./mychart

    flow control - if/else:
    ------------------------
        projectCode: aazzxxyy
        infra:
            zone: a,b,c
            region: us-e

        {{ if eq .Values.infra.region "us-e" }}
        ha: true
        {{ end }}
        note: this will print a space in result, to get rid of it add - as below
        {{- if eq .Values.infra.region "us-e" }}
        ha: true
        {{- end }}

        //Should not be done. Error
        {{- if eq .Values.infra.region "us-e" -}}
            ha: true
        {{- end -}}
        helm install --dry-run --debug controlif ./mychart
        helm install controlif ./mychart
        helm get manifest controlif
        helm uninstall controlif

    scope using with:
    -------------------
        mychart/values.yaml
        tags:
        machine: frontdrive
        rack: 4c
        drive: ssd
        vcard: 8g

        {{- with .Values.tags }}
        Machine Type: {{ .machine | default "NA" | quote }}
        Rack ID: {{ .rack | quote }}
        Storage Type: {{ .drive | upper | quote }}
        Video Card: {{ .vcard | quote }}
        {{- end }}

        metadata:
        name: {{ .Release.Name}}-configmap
        labels:
            {{- with .Values.tags }}
            first: {{ .machine }}
            second: {{ .rack }}
            third: {{ .drive }}
            {{- end }}

        {{- with .Values.tags }}
        Machine Type: {{ .machine | default "NA" | quote }}
        Rack ID: {{ .rack | quote }}
        Storage Type: {{ .drive | upper | quote }}
        Video Card: {{ .vcard | quote }}
        Release: {{ .Release.Name }}
        {{- end }}

        # the above execution will error out as release in in the tag scope and value is unknown, can be solved this issue using variables

        {{- with .Values.tags }}
        Machine Type: {{ .machine | default "NA" | quote }}
        Rack ID: {{ .rack | quote }}
        Storage Type: {{ .drive | upper | quote }}
        Video Card: {{ .vcard | quote }}
        {{- end }}
        Release: {{ .Release.Name }}

        helm install --dry-run --debug withscope ./mychart


    Looping using Range:
    ---------------------
        mychart/values.yaml
        LangUsed:
            - Python
            - Ruby
            - Java
            - Scala

        LangUsed: |-
        {{- range .Values.LangUsed }}
        - {{ . | title | quote }}
        {{- end }}
        #title - Title case functions
        helm install --dry-run --debug controlif ./mychart

        NetSpeed: |-
        {{- range tuple "low" "medium" "high" }}
        - {{ . }}
        {{- end }}
        helm install --dry-run --debug controlif ./mychart

    template Variables:
    --------------------

        {{- $relname := .Release.Name -}}
        {{- with .Values.tags }}
        Machine Type: {{ .machine | default "NA" | quote }}
        Rack ID: {{ .rack | quote }}
        Storage Type: {{ .drive | upper | quote }}
        Video Card: {{ .vcard | quote }}
        Release: {{ $relname }}
        {{- end }}
        helm install --dry-run --debug vartest ./mychart

        LangUsed: |-
        {{- range $index, $topping := .Values.LangUsed }}
        - {{ $index }} : {{ $topping }}
        {{- end }}

        tags:
        {{- range $key, $value := .Values.tags }}
        {{ $key }} : {{ $value }}
        {{- end }}

        labels:
        helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
        app.kubernetes.io/instance: "{{ $.Release.Name }}"
        app.kubernetes.io/version: "{{ $.Chart.AppVersion }}"
        app.kubernetes.io/managed-by: "{{ $.Release.Service }}"

    Include content from same file: (named templates)
    ----------------------------------------------------

        {{- define "mychart.systemlables" }}
        labels:
            drive: ssd
            machine: frontdrive
            rack: 4c
            vcard: 8g
        {{- end }}
        # the above block can be in a seperate file with _ or can b in the sme block
        {{- template "mychart.systemlables" }}
        helm install --dry-run --debug templatedemo ./mychart

    Template include using scope:
    ------------------------------

        _helpers.tpl
        {{- define "mychart.systemlables" }}
            labels:
            drive: ssd
            machine: frontdrive
            rack: 4c
            vcard: 8g
        {{- end }}
        app.kubernetes.io/instance: "{{ $.Release.Name }}"
        app.kubernetes.io/version: "{{ $.Chart.AppVersion }}"
        app.kubernetes.io/managed-by: "{{ $.Release.Service }}"

        {{- template "mychart.systemlables" . }} or
        {{- template "mychart.systemlables" $ }}
    helm install --dry-run --debug templatedemo ./mychart

    Include template using keyword include:
    ----------------------------------------
        _helpers.tpl
        {{- define "mychart.version" -}}
        app_name: {{ .Chart.Name }}
        app_version: "{{ .Chart.Version }}"
        {{- end -}}
        #error
        labels:
            {{- template "mychart.version" $ }}

        helm install --dry-run --debug templatedemo ./mychart

        metadata:
        name: {{ .Release.Name}}-configmap
        labels:
        {{ include "mychart.version" . | indent 4 }}
        data:
        myvalue: "Sample Config Map"
        costCode: {{ .Values.costCode }}
        Zone: {{ quote .Values.infra.zone }}
        Region: {{ quote .Values.infra.region }}
        ProjectCode: {{ upper .Values.projectCode }}
        pipeline: {{ .Values.projectCode | upper | quote }}
        now: {{ now | date "2006-01-02"| quote }}
        contact: {{ .Values.contact | default "1-800-123-0000" | quote }}
        {{- range $key, $value := .Values.tags }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{include "mychart.version" $ | indent 2 }}

        helm install --dry-run --debug templatedemo ./mychart

    Notes:
    -------

        templates/NOTES.txt
        Thank you for support {{ .Chart.Name }}.
        Your release is named {{ .Release.Name }}.
        To learn more about the release, try:
        $ helm status {{ .Release.Name }}
        $ helm get all {{ .Release.Name }}
        $ helm uninstall {{ .Release.Name }}

        helm install notesdemo ./mychart

    sub-charts:
    ------------

        cd mychart/charts
        helm create mysubchart
        rm -rf mysubchart/templates/*.*
        mychart/charts/mysubchart/values.yaml (delete everything and dd below)
        dbhostname: mysqlnode
        mychart/charts/mysubchart/templates/configmap.yaml (create this as below)
        apiVersion: v1
        kind: ConfigMap
        metadata:
        name: {{ .Release.Name }}-innerconfig
        data:
        dbhost: {{ .Values.dbhostname }}
        helm install --dry-run --debug mysubchart mychart/charts/mysubchart
        Over riding values from parent:
            mychart/values.yaml (Add below)
            mysubchart:
                dbhostname: prodmyqlnode
        helm install --dry-run --debug subchartoverride mychart

    subchart global values:
    ------------------------
        mychart/values.yaml
        global:
        orgdomain: com.muthu4all
        mychart/charts/mysubchart/templates/configmap.yaml
        and
        mychart/templates/configmap.yaml
        orgdomain: {{ .Values.global.orgdomain }}
        helm install --dry-run --debug subchartoverride mychart

Chart repository:
------------------

    Refer 1, 2, 3
    helm create repotest
    helm package repotest  (will pckage the charts)
    curl --data-binary "@repotest-0.1.1.tgz" http://192.168.0.52:8080/api/charts  (will push to repo) [option 1]
    helm search repo mychartmuseumrepo (will search local in case you need updated info do update as below)
    helm repo update
    helm search repo mychartmuseumrepo
    helm search repo -l mychartmuseumrepo (to see all versions)

    adding more charts to repo:
    *****************************

    helm create repotest2
    helm package repotest2
    cp repotest2-0.1.0.tgz <chart museum storage> (idelly we dont use this as this is local i can use here) [options 2]
    helm repo update
    helm search repo mychartmuseumrepo
    helm search repo -l mychartmuseumrepo

    to install plugins to helm: (below is push plugin to push charts to repo)
    ***************************************************************************

     helm plugin install https://github.com/chartmuseum/helm-push.git
     helm plugin list
     helm create helmpushdemo
     helm push helmpushdemo/ mychartmuseumrepo [Option 3]
     helm repo update
     helm search repo mychartmuseumrepo

     Using github as repo:
    ************************

    mkdir helm_git_repo
    cd helm_git_repo
    echo "# helm_repo" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git config --global user.email "muthu4all@gmail.com"
    git config --global user.name "Muthukumar"
    git commit -m "first commit"
    git remote add origin https://github.com/<<useraccount>>/helm_git_repo.git
    git push -u origin master
    git remote add origin https://github.com/<<useraccount>>/helm_git_repo.git
    git push -u origin master
    cd ..
    helm create gitrepotest
    pwd
    cd helm_git_repo
    helm package /root/helm_demo/gitrepotest
    helm repo index .
    git add .
    git commit -m "my-repo"
    git push -u origin master
    https://raw.githubusercontent.com/kartheekbaddukonda/Learnings/master/helm/helm_repo_gh/

    add the github repo to helm repo list:
    ----------------------------------------

    helm repo add --username kartheekb@gmail.com --password 'xxxxxx' kb_gh_repo 'https://raw.githubusercontent.com/kartheekbaddukonda/Learnings/master/helm/helm_repo_gh/'
    helm search repo kb_gh_repo
    helm repo update
    helm search repo -l mychartmuseumrepo
    helm create gitrepotest2
    cd gitrepotest2
    cd helm_git_repo
    helm package /root/helm_demo/gitrepotest
    helm repo index .
    git add .
    git commit -m "my-repo"
    git push -u origin master
    helm repo update
    helm search repo -l mychartmuseumrepo

Chart Management:
-----------------

    Create and install:
    ********************

        helm create upgrade-rlbk
        helm repo add mychartmuseumrepo http://192.168.0.52:8080
        helm repo list
        helm search repo mychartmuseumrepo
        helm push upgrade-rlbk/ mychartmuseumrepo
        helm repo update
        helm search repo mychartmuseumrepo
        helm search repo -l mychartmuseumrepo
        kubectl get all
        helm install install-upgrade-rlbk-demo mychartmuseumrepo/upgrade-rlbk
        helm list
        kubectl get all
        helm list

    upgrade:
    **********

        vi Charts.yaml
        vi values.yaml
        helm push upgrade-rlbk/ mychartmuseumrepo
        helm repo update
        helm search repo mychartmuseumrepo
        helm search repo -l mychartmuseumrepo
        helm list
        helm upgrade install-upgrade-rlbk-demo mychartmuseumrepo/upgrade-rlbk
        kubectl get all
        helm history install-upgrade-rlbk-demo

    rollback & uninstall:
    *********************

        helm rollback install-upgrade-rlbk-demo 2 (specify the number that you wanted to rollback to)
        helm history install-upgrade-rlbk-demo
        kubectl get all
        helm uninstall install-upgrade-rlbk-demo
        helm list
        kubectl get all

    Helm dependency:
    *****************

        helm create dependencytest
        helm install mydeptestinstall --dry-run --debug ./dependencytest
        helm install mydeptestinstall ./dependencytest --set service.type=NodePort
        helm list
        helm status mydeptestinstall
        kubectl get all
        values.yaml
        image:
          repository: muthu4all/todo
          tag: 1.0.0
          pullPolicy: IfNotPresent
        helm lint ./dependencytest
        helm list
        helm uninstall mydeptestinstall
        helm install mydeptestinstalltodo ./dependencytest --set service.type=NodePort
        helm list
        kubectl get all
        requirements.yaml
        dependencies:
        - name: mariadb
          version: 7.x.x
          repository: https://kubernetes-charts.storage.googleapis.com/
        helm dependency build ./dependencytest
        helm dependency update ./dependencytest
        helm uninstall mydeptestinstalltodo
        helm install mydepwithmaria ./dependencytest --set service.type=NodePort
        kubectl get all
        kubectl describe pod <<>>

    chart hooks:
    *************

    available hooks : preinstall, post-install, pre-delete, pre-upgrade, post-upgrade, pre-rollback, post-rollback

        helm create hooktest
        ./hooktest/templates

        preinstall-hook.yaml

            apiVersion: v1
            kind: Pod
            metadata:
            name: preinstall-hook
            annotations:
                "helm.sh/hook": "pre-install"
            spec:
            containers:
            - name: hook1-container
                image: busybox
                imagePullPolicy: IfNotPresent
                command: ['sh', '-c', 'echo The pre-install hook Pod is running  - preinstall-hook && sleep 10']
            restartPolicy: Never
            terminationGracePeriodSeconds: 0

        postinstall-hook.yaml

            apiVersion: v1
            kind: Pod
            metadata:
            name: postinstall-hook
            annotations:
                "helm.sh/hook": "post-install"
            spec:
            containers:
            - name: hook2-container
                image: busybox
                imagePullPolicy: IfNotPresent
                command: ['sh', '-c', 'echo post-install hook Pod is running - post-install&& sleep 5']
            restartPolicy: Never
            terminationGracePeriodSeconds: 0

        helm install hooktestinstall ./hooktest
        helm status hooktestinstall
        kubectl get pods
        kubectl describe pod/preinstall-hook
        kubectl describe pod/preinstall-hook | grep -E 'Anno|Started:|Finished:'
        kubectl describe pod/hooktestinstall-86b894bc76-4jn7c | grep -E 'Anno|Started:|Finished:'
        kubectl describe pod/postinstall-hook | grep -E 'Anno|Started:|Finished:'
        helm delete hooktestinstall
        kubectl delete pod/preinstall-hook
        kubectl delete pod/postinstall-hook

    hooks as jobs:
    ****************

    preinstalljob-hook-job.yaml

            apiVersion: batch/v1
            kind: Job
            metadata:
            name: preinstalljob-hook-job
            annotations:
                "helm.sh/hook": "pre-install"
            spec:
            template:
                spec:
                containers:
                - name: pre-install
                    image: busybox
                    imagePullPolicy: IfNotPresent
                    command: ['sh', '-c', 'echo pre-install Job Pod is Running ; sleep 3']
                restartPolicy: OnFailure
                terminationGracePeriodSeconds: 0
            backoffLimit: 3
            completions: 1
            parallelism: 1

    postinstalljob-hook-job.yaml

            apiVersion: batch/v1
            kind: Job
            metadata:
            name: postinstalljob-hook-job
            annotations:
                "helm.sh/hook": "post-install"
            spec:
            template:
                spec:
                containers:
                - name: post-install
                    image: busybox
                    imagePullPolicy: IfNotPresent
                    command: ['sh', '-c', 'echo post-install Pod is Running ; sleep 6']
                restartPolicy: OnFailure
                terminationGracePeriodSeconds: 0
            backoffLimit: 3
            completions: 1
            parallelism: 1

    helm install hooktestjobinstall ./hooktest
    kubectl describe pod/preinstalljob-hook-job-m9zlx | grep -E 'Anno|Started:|Finished:'
    kubectl describe pod/hooktestjobinstall-5d45b488dc-fjzhk | grep -E 'Anno|Started:|Finished:'
    kubectl describe pod/postinstalljob-hook-job-pld5b | grep -E 'Anno|Started:|Finished:'
    helm delete hooktestjobinstall
    kubectl get jobs
    kubectl delete job/preinstalljob-hook-job
    kubectl delete job/postinstalljob-hook-job

    hooks with wight:
    ****************

    refer 4

Helm lint and test:
--------------------
    helm lint upgrade-rlbk (this is before deploy)
    helm test upgrade-rlbk (this is fter deploy, test if able to connect to all pods or not)

helm get and status:
---------------------

    helm list
    helm get notes install-upgrade-rlbk-demo
    helm get values install-upgrade-rlbk-demo
    helm get manifest install-upgrade-rlbk-demo
    helm get hooks install-upgrade-rlbk-demo
    helm get all install-upgrade-rlbk-demo
    helm status install-upgrade-rlbk-demo

helm proveanance and integrity:
---------------------------------

    gpg --gen-key
    gpg --list-secret-keys
    helm create signchartdemo
    ls ~/.gnupg/
    helm package --sign --key 'helmkeydemo' --keyring ~/.gnupg/secring.gpg signchartdemo
    helm verify signchartdemo-0.1.0.tgz
