official website: https://git-scm.com/
who uses git:
    https://stackshare.io/git
    https://government.github.com/community/
    sample book : https://github.com/HoTT/book (even writers use git)
git guis:https://git-scm.com/downloads/guis
git add : https://git-scm.com/docs/git-add
git commit : https://git-scm.com/docs/git-commit
git log: https://git-scm.com/docs/git-log
git docs: https://git-scm.com/docs
git editor config: https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config
git ignore: https://www.toptal.com/developers/gitignore

Git Core:
----------
intro to Git
Installation
Git Basics
committing in detail
Branching
Merging

next level:
-------------
Diffing
Stashing
Undoing changes

tool specific:
---------------
github intro
fetching & pulling
github odds & ends
Collabrative workflow

The other parts:
-----------------
Rebasing
interactive Rebasing
git tags
git behind the scenes
reflogs
custom alias

what git helps us with:
-----------------------
> track changes across multiple files
> compare versions of a project
> time travel back to older versions
> Revert to a previous version
> collaborate and share changes
> Combine changes

* git config --global user.name "Kartheek"
* git config --global user.email kartheekb@gmail.com

some linux basic commands you should know:

-   ls (list) , ls -a (list hidden files) , ls -la  (long list)  | ls abcd | ls abcd/xyz
-   pwd (print working directory)
-   cd (Change directory) / cd .. (to go back one level)
-   touch (create a new file)
-   mkdir (make a directory)
-   rm (remove) , rm -rf (remove recursive and force for folders)
-   open . (mac) / start . | open abcd
-   clear (clear screen)
-   tab (keyboard shortcut to auto complete)
-   esc i > add text > esc :wq! (write and quit)

basics:

Prctice will be a diff directory in this laptop.
folder name: git_practice
    git status
    git init (make a folder per repo and initialize, thats it)

working area > git add > staging area > git commit > Repository > git push > remote repository

do the work

git add . (or git add file1 file2 file3 etc. for adding specific files to staging area)
git commit (it will prompt for message)
git commit -m "initial commit" (what ever staged can be committed to repository)
git rm --cached file1 file2 etc. ( to remove from staging area and back to working area)

>   keep your commits atomic (the smaller commit the easier it is rollback)
>   commit messages should be present tense (not by law by convention)
>   always use editor than default vim that comes along with git. (its tedious task)
    *   git config --global core.editor "code --wait"
>   cmd + shift + P for command pallet  : shell command : install code command in path

    git log --abbrev-commit
    git log --abbrev-commit --pretty=oneline

GUI (gitkraken)

>   git commit --amend (you can fix typo in commit messge, you can add missing files etc.)
(note that it is applicable for one commit ago, not some few commits ago)
* make sure to add (git add xyz) files before amend

ignoring files: ex: https://github.com/signalapp/Signal-Android

>   sensitive data like secrets, API keys, credentials etc.
>   OS files
>   log files
>   Dependencies and packages etc.

